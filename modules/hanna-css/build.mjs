// @ts-check
/* eslint-env es2022 */
import { execSync } from 'child_process';
import { compileCSSFromJS } from 'es-in-css/compiler';
import esbuild from 'esbuild';
import { readdir, readFile, writeFile } from 'fs/promises';
import globPkg from 'glob';

import {
  buildNpmLib,
  buildTests,
  distDir,
  exit1,
  externalDeps,
  opts,
  srcDir,
} from '../../build-helpers.mjs';

import { devDistCssFolder, serverFolder } from './scripts/config.js';

const glob = globPkg.sync;

const logError = (err) => {
  if (!opts.dev) {
    exit1(err);
  }
  const message = 'message' in err ? err.message : err;
  console.error(message);
};

// ---------------------------------------------------------------------------

/** @type {import('esbuild').BuildOptions} */
const baseOpts = {
  bundle: true,
  platform: 'node',
  target: ['node16'],
  format: 'cjs',
  watch: !!opts.dev,
};

// ---------------------------------------------------------------------------

/** @param {string} cssVersion */
const getCssVersionTokenUnion = async (cssVersion) => {
  // Read all css version folders currently the built style server.
  // NOTE: We assume the CSS folder contains only folders.
  const cssFolders = await readdir(`${serverFolder}public/css`).then(
    (contents) => contents.filter((name) => name !== 'dev')
    // TODO: Limit `CssVersionToken` to just the currently supported version-range
    // Filter for current major cssVersion (and it's "dev-V" variant).
  );
  /** @type {Record<string, 1>} */
  const cssFoldersPlus = {};
  cssFolders.forEach((name) => {
    // collect all the version substrings of each version folder
    // ( i.e. turn `"v1.3.4"` into `["v1.3.4", "v1.3", "v1"]` )
    cssFoldersPlus[name] = 1;
    const nameBits = name.split('.');
    let i = nameBits.length - 1;
    while (i > 0) {
      nameBits.pop();
      const shortName = nameBits.join('.');
      if (shortName in cssFoldersPlus) {
        break; // because we're reached already covered territory
      }
      cssFoldersPlus[shortName] = 1;
      i--;
    }
  });

  return Object.keys(cssFoldersPlus)
    .sort()
    .map((key) => `  | '${key}'`)
    .join('\n');
};

const geCssTokenUnion = async () => {
  // TODO: Generate `CssToken` type listing all the current files matching
  // `modules/hanna-css/src/css/[A-Z]*.css.ts` files (plus `-basics`)
  const isNamespaceExport = [];
  return isNamespaceExport.map((key) => `  | '${key}'`).join('\n');
};

/** @param {string} cssVersion */
const createStyleServerInfoTsFile = async (cssVersion) => {
  const CssVersionTokenUnion = await getCssVersionTokenUnion(cssVersion);
  const CssTokenUnion = await geCssTokenUnion();

  await writeFile(
    `${srcDir}/lib/style-server-info.ts`,
    [
      `// This file is auto-generated by build.mjs`,
      ``,
      `export const cssVersion = ${JSON.stringify(cssVersion)};`,
      ``,
      `export type CssVersionToken =`,
      `${CssVersionTokenUnion};`,
      ``,
      // `export type CssToken =`,
      // `${CssTokenUnion};`,
      // ``,
    ].join('\n')
  );
};

// ---------------------------------------------------------------------------
// Always start by exposing style-server-info from package-server.json
// (because tsc is limited)

await readFile('./package-server.json')
  .then((str) => JSON.parse(str.toString()))
  .then(({ cssVersion }) => createStyleServerInfoTsFile(cssVersion))
  .catch(exit1);

// ---------------------------------------------------------------------------
// Always start by building the iconfont

if (!opts.onlyLib) {
  execSync(`rm -rf ${devDistCssFolder}  &&  mkdir ${devDistCssFolder}`);
}
execSync(`yarn run gulp iconfont`);

//
// ---------------------------------------------------------------------------
// Build Unit Tests and NPM library

buildTests();

buildNpmLib('css', {
  src: 'src/lib',
  cpCmds: [
    `cp README-lib.md ${distDir}/README.md`,
    `cp CHANGELOG-lib.md ${distDir}/CHANGELOG.md`,
  ],
  entryGlobs: ['index.ts'],
});

// ---------------------------------------------------------------------------

if (!opts.onlyLib) {
  execSync(`yarn run gulp compressImages`);

  //
  // ---------------------------------------------------------------------------
  // Build CSS files

  let fileMem = {};
  const toCSSSources = (res) => {
    const outputfiles = res.outputFiles
      .filter(({ path }) => !fileMem[path])
      .map((res) => ({ fileName: res.path, content: res.text }));
    fileMem = {};
    outputfiles.forEach(({ path }) => {
      fileMem[path] = true;
    });
    return outputfiles;
  };

  const cssCompile = (results) =>
    compileCSSFromJS(toCSSSources(results), {
      outbase: 'src/css',
      outdir: devDistCssFolder,
      redirect: (outFile) => outFile.replace(/\/\$\$.+?\$\$-/, '/'),
      minify: process.env.NODE_ENV === 'production',
      prettify: process.env.NODE_ENV !== 'production',
      nested: { rootRuleName: 'escape' },
    });

  esbuild
    .build({
      ...baseOpts,
      external: externalDeps,
      entryPoints: glob('src/css/**/*.css.ts'),
      entryNames: '[dir]/$$[hash]$$-[name]',
      outbase: 'src/css',
      outdir: 'src/css',
      write: false,
      watch: !!opts.dev && {
        onRebuild: (error, results) => {
          if (!error) {
            cssCompile(results).catch(logError);
          }
        },
      },
      define: {
        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
      },
    })
    .then(cssCompile)
    // FIXME: cleanup temporary .js files on error
    .catch(logError);
}
